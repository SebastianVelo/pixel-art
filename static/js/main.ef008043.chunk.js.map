{"version":3,"sources":["classes/ColorBean.js","classes/GridBean.js","util/ColorUtil.js","classes/ColorCfg.js","util/JQueryUtil.js","util/GridUtil.js","classes/CanvasCfg.js","components/settings/sidenav/tools/Tools.js","components/settings/sidenav/colorsettings/dropdownselectcolor/selectedcolor/SelectedColor.js","components/range/Range.js","components/settings/sidenav/colorsettings/dropdownselectcolor/rangesgroup/RangesGroup.js","components/settings/sidenav/colorsettings/dropdownselectcolor/DropdownSelectColor.js","components/grid/row/cell/Cell.js","components/grid/row/Row.js","components/grid/Grid.js","components/settings/sidenav/colorsettings/savedcolors/SavedColors.js","components/settings/sidenav/colorsettings/buttonsave/ButtonSave.js","components/settings/sidenav/colorsettings/ColorSettings.js","components/settings/sidenav/canvassettings/CanvasSettings.js","components/settings/sidenav/Sidenav.js","components/settings/Settings.js","components/main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["ColorBean","r","g","b","this","rgb","rgbArray","substring","length","split","parseInt","color","getRGB","GridBean","rows","columns","size","border","rgbCfg","txt","range","label","default","min","max","defaultSavedColors","getId","id","getClass","className","canvasCfg","row","column","cellSize","htmlSettings","idCanvas","idSavedColors","classCell","classCellCanvas","classCellSavedColors","getCellClass","gridId","resetCanvas","$","css","getLastCellIDSavedColors","property","value","cells","index","i","style","backgroundColor","setGridSize","grid","setInFront","axis","text","val","setCellSize","Tools","props","classNameActive","onClick","setMode","eraserMode","printMode","eraser","download","SelectedColor","Range","item","type","step","onChange","funct","RangesGroup","changeColor","DropdownSelectColor","onMouseOver","setOpacity","onMouseOut","Cell","x","y","owner","Row","push","Grid","SavedColors","copyColor","ButtonSave","saveColor","ColorSettings","divId","slideToggle","CanvasSettings","isMobile","changeSize","Sidenav","state","Component","Settings","selectedColor","savedColors","print","setState","colorizeCellWithSelectedColor","bind","setColors","setColorInState","cellId","colorizeCell","setDownloadImage","bgColor","document","getElementById","setRGB","find","equals","lastId","forEach","Array","prototype","apply","width","height","changeGrid","fillDefaultSavedColors","prevProps","prevState","toString","html2canvas","querySelector","then","canvas","image","toDataURL","replace","attr","Main","App","isTablet","Warning","PixelArt","withGetScreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ef008043.chunk.js","sourcesContent":["class ColorBean {\r\n    constructor(r, g, b) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n    }\r\n\r\n    getRGB() {\r\n        return \"rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\r\n    }\r\n\r\n    setRGB(rgb) {\r\n        let rgbArray = rgb.substring(4, rgb.length-1).split(\",\");\r\n        rgbArray = rgbArray.length !== 3 ? [255, 255, 255] : rgbArray;\r\n        this.r = parseInt(rgbArray[0]);\r\n        this.g = parseInt(rgbArray[1]);\r\n        this.b = parseInt(rgbArray[2]);\r\n    }\r\n\r\n    equals(color) {\r\n        return this.getRGB() === color.getRGB();\r\n    }\r\n}\r\nexport default ColorBean;","class GridBean {\r\n    constructor(rows, columns, size, border) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.size = size;\r\n        this.border = border;\r\n    }\r\n\r\n    toString() {\r\n        return \"Rows: \" + this.rows + \" | \" +\r\n        \"Columns: \" + this.columns + \" | \" +\r\n        \"Size: \" + this.size + \" | \" +\r\n        \"Border: \" + this.border + \" | \";\r\n    }\r\n}\r\nexport default GridBean;","import ColorBean from \"../classes/ColorBean\";\r\nimport ColorCfg from \"../classes/ColorCfg\";\r\n\r\nconst rgbCfg = new ColorCfg();\r\nconst defaultSavedColors = [\r\n    new ColorBean(0, 0, 0),\r\n    new ColorBean(255, 255, 255),\r\n\r\n    new ColorBean(255, 0, 0),\r\n    new ColorBean(0, 255, 0),\r\n    new ColorBean(0, 0, 255),\r\n\r\n    new ColorBean(255, 0, 255),\r\n    new ColorBean(255, 255, 0),\r\n    new ColorBean(0, 255, 255),\r\n    \r\n    new ColorBean(100, 255, 100),\r\n    new ColorBean(255, 100, 100),\r\n    new ColorBean(100, 100, 255),\r\n\r\n    new ColorBean(100, 150, 200),\r\n    new ColorBean(200, 150, 100),\r\n    new ColorBean(150, 200, 100),\r\n]\r\n\r\nexport { rgbCfg, defaultSavedColors }","class ColorCfg {\r\n    constructor() {\r\n        this.r = {\r\n            txt: \"Rojo\",\r\n            range: \"rangeR\",\r\n            label: \"labelR\",\r\n            default: 150,\r\n            min: 0,\r\n            max: 255\r\n        };\r\n        this.g = {\r\n            txt: \"Verde\",\r\n            range: \"rangeG\",\r\n            label: \"labelG\",\r\n            default: 50,\r\n            min: 0,\r\n            max: 255\r\n        };\r\n        this.b = {\r\n            txt: \"Azul\",\r\n            range: \"rangeB\",\r\n            label: \"labelB\",\r\n            default: 0,\r\n            min: 0,\r\n            max: 255\r\n        }\r\n    }\r\n}\r\nexport default ColorCfg;","const getId = (id) => \"#\" + id;\r\nconst getClass = (className) => \".\" + className;\r\nconst getProperty = (property, value) => \"[\" + property + \"='\" + value + \"']\";\r\n\r\nexport { getId, getClass, getProperty };","import $ from \"jquery\";\r\nimport { getId, getClass, getProperty } from \"../util/JQueryUtil\";\r\nimport CanvasCfg from \"../classes/CanvasCfg\";\r\n\r\nconst canvasCfg = new CanvasCfg();\r\nconst getCellId = (x, y, gridId) => gridId + x + \"-\" + y;\r\nconst getCellClass = (gridId) => canvasCfg.htmlSettings.classCell + gridId;\r\n\r\n\r\n/* Sets a white backgroundColor in canvas */\r\nfunction resetCanvas() {\r\n    $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"background-color\", \"white\");\r\n}\r\n\r\n/* Returns the last cellId without backgroundColor */\r\nfunction getLastCellIDSavedColors() {\r\n    let cells = $(getProperty(\"owner\", canvasCfg.htmlSettings.idSavedColors));\r\n    let index = 0;\r\n    for (let i = 0; i < cells.length; i++) {\r\n        if (cells[i].style.backgroundColor.length === 0) {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    return cells[index].id;\r\n}\r\n\r\n/* modifies values in the website with the grid in props and calls setCellSize() */\r\nfunction setGridSize(grid) {\r\n    let setInFront = (range, label, axis) => {\r\n        let value = grid[axis];\r\n        $(getId(label)).text(value);\r\n        $(getId(range)).val(value);\r\n    };\r\n    setInFront(canvasCfg.row.range, canvasCfg.row.label, \"rows\");\r\n    setInFront(canvasCfg.column.range, canvasCfg.column.label, \"columns\");\r\n    setInFront(canvasCfg.cellSize.range, canvasCfg.cellSize.label, \"size\");\r\n    setInFront(canvasCfg.border.range, canvasCfg.border.label, \"border\");\r\n    setCellSize(grid);\r\n}\r\n\r\n/* Modifies the width and height of cells with the grid in props */\r\nfunction setCellSize(grid) {\r\n    $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"width\", grid.size);\r\n    $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"height\", grid.size);\r\n    $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"border\", grid.border + \"px solid black\");\r\n}\r\n\r\nexport {\r\n    canvasCfg,\r\n    getCellId, getCellClass,\r\n    resetCanvas, getLastCellIDSavedColors,\r\n    setCellSize, setGridSize\r\n};","class CanvasCfg {\r\n    constructor() {\r\n        this.row = {\r\n            txt: \"Alto\",\r\n            range: \"height\",\r\n            label: \"labelH\",\r\n            default: 20,\r\n            min: 1,\r\n            max: 30\r\n        };\r\n        this.column = {\r\n            txt: \"Ancho\",\r\n            range: \"width\",\r\n            label: \"labelW\",\r\n            default: 15,\r\n            min: 1,\r\n            max: 30\r\n        };\r\n        this.cellSize = {\r\n            txt: \"Celda\",\r\n            range: \"size\",\r\n            label: \"labelS\",\r\n            default: 15,\r\n            min: 7,\r\n            max: 15\r\n        };\r\n        this.border = {\r\n            txt: \"Borde\",\r\n            range: \"border\",\r\n            label: \"labelBorder\",\r\n            default: 1,\r\n            min: 0,\r\n            max: 2\r\n        };\r\n        this.htmlSettings = {\r\n            idCanvas: \"canvas\",\r\n            idSavedColors: \"gridSavedColors\",\r\n            classCell: \"cell\",\r\n        };\r\n        this.htmlSettings.classCellCanvas = this.htmlSettings.classCell + this.htmlSettings.idCanvas;\r\n        this.htmlSettings.classCellSavedColors = this.htmlSettings.classCell + this.htmlSettings.idSavedColors;\r\n    }\r\n}\r\nexport default CanvasCfg;","function Tools(props) {\r\n    let classNameActive = \"active\";\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <center>\r\n                <button\r\n                    onClick={() => props.setMode(true)}\r\n                    className={!props.eraserMode && props.printMode ? classNameActive : \"\"}\r\n                >\r\n                    <i className='fas fa-paint-brush'></i>\r\n                </button>\r\n                <button\r\n                    onClick={() => props.setMode(false)}\r\n                    className={!props.eraserMode && !props.printMode ? classNameActive : \"\"}\r\n                >\r\n                    <i className='fas fa-eye-dropper'></i>\r\n                </button>\r\n                <button\r\n                    onClick={() => props.eraser()}\r\n                    className={props.eraserMode ? classNameActive : \"\"}\r\n                >\r\n                    <i className='fas fa-eraser'></i>\r\n                </button>\r\n                <button onClick={() => props.resetCanvas()}>\r\n                    <i className='fas fa-trash-alt'></i>\r\n                </button>\r\n                <a id=\"saveImage\" download=\"pixel-art.png\" >\r\n                    <button>\r\n                        <i className='fas fa-save'></i>\r\n                    </button>\r\n                </a>\r\n            </center>\r\n        </div>\r\n    )\r\n}\r\nexport default Tools;\r\n","function SelectedColor() {\r\n    return (\r\n        <div id=\"selectedColor\"> &nbsp; </div>\r\n    );\r\n}\r\nexport default SelectedColor;\r\n","function Range(props) {\r\n    return (\r\n        <div className=\"range\">\r\n            <label className=\"labelRange\">{props.item.txt}</label> <br />\r\n            <label className=\"labelRangeValue\" id={props.item.label}></label> <br />\r\n            <input\r\n                className=\"inputRange\"\r\n                id={props.item.range}\r\n                type=\"range\"\r\n                min={props.item.min}\r\n                max={props.item.max}\r\n                step=\"1\"\r\n                onChange={() => props.funct()}></input>\r\n        </div>\r\n    )\r\n}\r\nexport default Range;","import Range from \"../../../../../range/Range\";\r\nimport { rgbCfg } from \"../../../../../../util/ColorUtil\";\r\n\r\nfunction RangesGroup(props) {\r\n    return (\r\n        <div className=\"dropdown-content\">\r\n            <Range item={rgbCfg.r} funct={props.changeColor} />\r\n            <Range item={rgbCfg.g} funct={props.changeColor} />\r\n            <Range item={rgbCfg.b} funct={props.changeColor} />\r\n        </div>\r\n    )\r\n}\r\nexport default RangesGroup;","import $ from \"jquery\";\r\n\r\nimport SelectedColor from \"./selectedcolor/SelectedColor\";\r\nimport RangesGroup from \"./rangesgroup/RangesGroup\";\r\n\r\nfunction DropdownSelectColor(props) {\r\n    return (\r\n        <div className=\"dropdown\" onMouseOver={() => setOpacity(0.1)} onMouseOut={() => setOpacity(1)}>\r\n            <SelectedColor />\r\n            <RangesGroup changeColor={props.changeColor} />\r\n        </div>\r\n    );\r\n}\r\nexport default DropdownSelectColor;\r\n\r\nfunction setOpacity(value) {\r\n    $(\".opaque\").css(\"opacity\", value);\r\n}","import { getCellId, getCellClass } from \"../../../../util/GridUtil\";\r\n\r\nfunction Cell(props) {\r\n    let id = getCellId(props.x, props.y, props.id);\r\n    return (\r\n        <td owner={props.id} id={id} className={getCellClass(props.id)} onClick={() => props.funct(id)}></td>\r\n    );\r\n}\r\nexport default Cell;","import Cell from \"./cell/Cell\";\r\n\r\nfunction Row(props){\r\n    let columns = [];\r\n    for(let i = 0; i < props.columns; i++)\r\n        columns.push(<Cell key={i} x={i} y={props.row} funct={props.funct} id={props.id} />);\r\n        \r\n    return (<tr>{columns}</tr>);\r\n}\r\nexport default Row;","import Row from \"./row/Row\";\r\n\r\nfunction Grid(props) {\r\n    let rows = [];\r\n    for (let i = 0; i < props.rows; i++)\r\n        rows.push(<Row key={i} columns={props.columns} row={i} funct={props.funct} id={props.id} />);\r\n\r\n    return (<table id={props.id} className=\"grid\"><tbody>{rows}</tbody></table>);\r\n}\r\nexport default Grid;","import Grid from \"../../../../grid/Grid\";\r\nimport { canvasCfg } from \"../../../../../util/GridUtil\";\r\n\r\nfunction SavedColors(props) {\r\n    return (\r\n        <div>\r\n            <h5>Colores guardados</h5>\r\n            <div>\r\n                <Grid rows={6} columns={12} funct={props.copyColor} id={canvasCfg.htmlSettings.idSavedColors} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SavedColors;","function ButtonSave(props) {\r\n    return (\r\n        <center>\r\n            <button id=\"buttonSave\" onClick={() => props.saveColor()}>\r\n                <i className='fas fa-save'></i>&nbsp;&nbsp;Guardar color\r\n            </button>\r\n        </center>\r\n    );\r\n}\r\nexport default ButtonSave;","import $ from \"jquery\";\r\n\r\nimport DropdownSelectColor from \"./dropdownselectcolor/DropdownSelectColor\";\r\nimport SavedColors from \"./savedcolors/SavedColors\";\r\nimport ButtonSave from \"./buttonsave/ButtonSave\";\r\nimport { getId } from \"../../../../util/JQueryUtil\";\r\n\r\nimport \"./ColorSettings.css\";\r\n\r\nfunction ColorSettings(props) {\r\n    const divId = \"bodyColorSettings\";\r\n    return (\r\n        <div>\r\n            <p onClick={() => $(getId(divId)).slideToggle()}>Color</p>\r\n            <div id={divId}>\r\n                <DropdownSelectColor changeColor={props.changeColor} />\r\n                <ButtonSave          saveColor={props.saveColor}     />\r\n                <SavedColors         copyColor={props.copyColor}     />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ColorSettings;","import $ from \"jquery\";\r\n\r\nimport Range from \"../../../range/Range\";\r\nimport { canvasCfg } from \"../../../../util/GridUtil\";\r\nimport { getId } from \"../../../../util/JQueryUtil\";\r\n\r\nfunction CanvasSettings(props) {\r\n    const divId = \"bodySizeSettings\";\r\n    let item = canvasCfg.column;\r\n    item.max = props.isMobile ? 20 : item.max;\r\n    return (\r\n        <div className=\"opaque\">\r\n            <p onClick={() => $(getId(divId)).slideToggle()}>Lienzo</p>\r\n            <div id={divId}>\r\n                <Range item={canvasCfg.column}   funct={props.changeSize} />\r\n                <Range item={canvasCfg.row}      funct={props.changeSize} />\r\n                <Range item={canvasCfg.cellSize} funct={props.changeSize} />\r\n                <Range item={canvasCfg.border}   funct={props.changeSize} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CanvasSettings;","import React, { Component } from \"react\";\r\n\r\nimport Tools from \"./tools/Tools\";\r\nimport ColorSettings from \"./colorsettings/ColorSettings\";\r\nimport CanvasSettings from \"./canvassettings/CanvasSettings\";\r\n\r\nimport \"./Sidenav.css\";\r\n\r\nclass Sidenav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sidenav\">\r\n                <Tools\r\n                    setMode={this.props.setMode}\r\n                    eraser={this.props.eraser}\r\n                    resetCanvas={this.props.resetCanvas}\r\n                    printMode={this.props.printMode}\r\n                    eraserMode={this.props.eraserMode}\r\n                />\r\n                <ColorSettings\r\n                    changeColor={this.props.changeColor}\r\n                    saveColor={this.props.saveColor}\r\n                    copyColor={this.props.copyColor}\r\n                />\r\n                <CanvasSettings changeSize={this.props.changeSize} isMobile={this.props.isMobile} />\r\n                <br/><br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Sidenav;","import React, { Component } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport $ from \"jquery\";\r\n\r\nimport ColorBean from \"../../classes/ColorBean\";\r\nimport GridBean from \"../../classes/GridBean\";\r\nimport { rgbCfg, defaultSavedColors } from \"../../util/ColorUtil\";\r\nimport { canvasCfg, resetCanvas, getLastCellIDSavedColors, setCellSize, setGridSize } from \"../../util/GridUtil\";\r\nimport { getId, getClass, getProperty } from \"../../util/JQueryUtil\";\r\n\r\nimport Sidenav from \"./sidenav/Sidenav\";\r\n\r\nclass Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedColor: new ColorBean(rgbCfg.r.default, rgbCfg.g.default, rgbCfg.b.default),\r\n            savedColors: [],\r\n            eraser: false,\r\n            printMode: true\r\n        }\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* MODE */\r\n\r\n    /* Receives a boolean in parameter and calls setMode() function of App.js */\r\n    setMode(print) {\r\n        let state = this.state;\r\n        state.printMode = print;\r\n        state.eraser = false;\r\n        this.setState({ state });\r\n        return print ?\r\n            this.props.setMode(this.colorizeCellWithSelectedColor.bind(this)) :\r\n            this.props.setMode(this.copyColor.bind(this));\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* COLORS */\r\n\r\n    /* Receives a color in parameter and modifies the selectedColor attribute in state */\r\n    setColorInState(color) {\r\n        let state = this.state;\r\n        state.selectedColor = color;\r\n        this.setState({ state });\r\n        this.setColors();\r\n    }\r\n\r\n    /* Creates a color with values of ranges, and calls setColorInState() */\r\n    changeColor() {\r\n        let r = $(getId(rgbCfg.r.range)).val();\r\n        let g = $(getId(rgbCfg.g.range)).val();\r\n        let b = $(getId(rgbCfg.b.range)).val();\r\n        let color = new ColorBean(r, g, b);\r\n        this.setColorInState(color);\r\n    }\r\n\r\n    /* Creates a white color, and calls setColorInState() */\r\n    eraser() {\r\n        let state = this.state;\r\n        state.eraser = !state.eraser;\r\n        this.setState({ state });\r\n    }\r\n\r\n    /*  Receives a cellId in parameter and \r\n    modifies its backgroundColor with the selectedColor attribute in state */\r\n    colorizeCellWithSelectedColor(cellId) {\r\n        if (this.state.eraser)\r\n            this.colorizeCell(cellId, new ColorBean(255, 255, 255));\r\n        else\r\n            this.colorizeCell(cellId, this.state.selectedColor)\r\n    }\r\n\r\n    /*  Receives a cellId in parameter and \r\n    modifies its backgroundColor with the color in parameter */\r\n    colorizeCell(cellId, color) {\r\n        $(getId(cellId)).css(\"background-color\", color.getRGB());\r\n        setDownloadImage();\r\n    }\r\n\r\n    /* Receives a cellId in parameter, creates a color with its backgroundColor and\r\n    calls setColorInState() */\r\n    copyColor(cellId) {\r\n        let bgColor = document.getElementById(cellId).style.backgroundColor;\r\n        let color = new ColorBean();\r\n        color.setRGB(bgColor);\r\n        this.setMode(true);\r\n        this.setColorInState(color);\r\n    }\r\n\r\n    /* Looking for the last cellId without backgroundColor and calls colorizeCellWithSelectedColor() */\r\n    saveColor() {\r\n        let colorIsAlreadySaved = () => this.state.savedColors.find(color => color.equals(this.state.selectedColor));\r\n        if (colorIsAlreadySaved()) {\r\n            return;\r\n        }\r\n        let lastId = getLastCellIDSavedColors();\r\n        this.colorizeCellWithSelectedColor(lastId);\r\n\r\n        let state = this.state;\r\n        state.savedColors.push(this.state.selectedColor);\r\n        this.setState({ state });\r\n    }\r\n\r\n    fillDefaultSavedColors() {\r\n        defaultSavedColors.forEach(color => {\r\n            let lastId = getLastCellIDSavedColors();\r\n            this.colorizeCell(lastId, color);\r\n        })\r\n        let state = this.state;\r\n        Array.prototype.push.apply(state.savedColors, defaultSavedColors);\r\n        this.setState({ state });\r\n    }\r\n\r\n    /* modifies values in the website and the background color of selectedColor's cell */\r\n    setColors() {\r\n        let setInFront = (range, label, color) => {\r\n            let value = this.state.selectedColor[color];\r\n            $(getId(label)).text(value);\r\n            $(getId(range)).val(value);\r\n        };\r\n        setInFront(rgbCfg.r.range, rgbCfg.r.label, \"r\");\r\n        setInFront(rgbCfg.g.range, rgbCfg.g.label, \"g\");\r\n        setInFront(rgbCfg.b.range, rgbCfg.b.label, \"b\");\r\n        this.colorizeCellWithSelectedColor(\"selectedColor\");\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* SIZE */\r\n\r\n    /* Create a grid with values of ranges and calls changeGrid() function of App.js and setGridSize() */\r\n    changeSize() {\r\n        let width = $(getId(canvasCfg.column.range)).val();\r\n        let height = $(getId(canvasCfg.row.range)).val();\r\n        let size = $(getId(canvasCfg.cellSize.range)).val();\r\n        let border = $(getId(canvasCfg.border.range)).val();\r\n        let grid = new GridBean(height, width, size, border);\r\n        this.props.changeGrid(grid);\r\n        setGridSize(grid);\r\n        setDownloadImage();\r\n    }\r\n\r\n    componentDidMount() {\r\n        setGridSize(this.props.grid);\r\n        this.setColors();\r\n        this.fillDefaultSavedColors();\r\n        this.setMode(true);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.grid.toString() !== prevProps.grid.toString()) {\r\n            setCellSize(this.props.grid);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Sidenav\r\n                    changeSize={this.changeSize.bind(this)}\r\n                    changeColor={this.changeColor.bind(this)}\r\n                    saveColor={this.saveColor.bind(this)}\r\n                    copyColor={this.copyColor.bind(this)}\r\n                    setMode={this.setMode.bind(this)}\r\n                    eraser={this.eraser.bind(this)}\r\n                    resetCanvas={resetCanvas}\r\n                    isMobile={this.props.isMobile}\r\n                    printMode={this.state.printMode}\r\n                    eraserMode={this.state.eraser}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Settings;\r\n\r\n\r\nfunction setDownloadImage() {\r\n    html2canvas(document.querySelector(getId(canvasCfg.htmlSettings.idCanvas))).then(canvas => {\r\n        var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        $(\"#saveImage\").attr(\"href\", image);\r\n    });\r\n}","import Grid from \"../grid/Grid\";\r\nimport { canvasCfg } from \"../../util/GridUtil\";\r\n\r\nfunction Main(props) {\r\n        return (\r\n            <div className=\"main\">\r\n                <Grid\r\n                    rows={props.grid.rows}\r\n                    columns={props.grid.columns}\r\n                    funct={props.funct}\r\n                    id={canvasCfg.htmlSettings.idCanvas}\r\n                />\r\n            </div>\r\n        );\r\n}\r\nexport default Main;","import React, { Component } from \"react\";\r\nimport { withGetScreen } from 'react-getscreen';\r\nimport \"./App.css\";\r\nimport \"./components/grid/Grid.css\";\r\n\r\nimport Settings from \"./components/settings/Settings\";\r\nimport Main from \"./components/main/Main\";\r\nimport GridBean from \"./classes/GridBean\";\r\nimport { canvasCfg } from \"./util/GridUtil\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      funct: () => { },\r\n      grid: new GridBean(canvasCfg.row.default,\r\n        canvasCfg.column.default,\r\n        canvasCfg.cellSize.default,\r\n        canvasCfg.border.default),\r\n    }\r\n  }\r\n\r\n  /* Modifies the funct attribute in the state */\r\n  setMode(funct) {\r\n    let state = this.state;\r\n    state.funct = funct;\r\n    this.setState({ state });\r\n  }\r\n\r\n  /* Modifies the grid attribute in the state */\r\n  changeGrid(grid) {\r\n    let state = this.state;\r\n    state.grid = grid;\r\n    this.setState({ state });\r\n  }\r\n\r\n  PixelArt() {\r\n    return (\r\n      <div>\r\n        <Settings isMobile={this.props.isTablet()} grid={this.state.grid} setMode={this.setMode.bind(this)} changeGrid={this.changeGrid.bind(this)} />\r\n        <Main grid={this.state.grid} funct={this.state.funct} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  Warning() {\r\n    return (\r\n      <div id=\"warning\">\r\n        <h1>Por favor, voltea el dispositivo para poder usar PixelArt</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.props.isMobile()) return this.Warning();\r\n    return this.PixelArt();\r\n  }\r\n}\r\n\r\nexport default withGetScreen(App);","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}