{"version":3,"sources":["classes/ColorBean.js","classes/GridBean.js","util/ColorUtil.js","classes/ColorCfg.js","util/GridUtil.js","classes/CanvasCfg.js","util/JQueryUtil.js","components/settings/topnav/tools/Tools.js","components/settings/topnav/Topnav.js","components/settings/sidenav/colorsettings/dropdownselectcolor/selectedcolor/SelectedColor.js","components/range/Range.js","components/settings/sidenav/colorsettings/dropdownselectcolor/rangesgroup/RangesGroup.js","components/settings/sidenav/colorsettings/dropdownselectcolor/DropdownSelectColor.js","components/grid/row/cell/Cell.js","components/grid/row/Row.js","components/grid/Grid.js","components/settings/sidenav/colorsettings/savedcolors/SavedColors.js","components/settings/sidenav/colorsettings/buttonsave/ButtonSave.js","components/settings/sidenav/colorsettings/ColorSettings.js","components/settings/sidenav/canvassettings/CanvasSettings.js","components/settings/sidenav/Sidenav.js","components/settings/Settings.js","components/main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["ColorBean","r","g","b","this","rgb","rgbArray","substring","length","split","parseInt","color","getRGB","GridBean","rows","columns","size","border","rgbCfg","txt","range","label","default","min","max","canvasCfg","row","column","cellSize","htmlSettings","idCanvas","idSavedColors","classCell","classCellCanvas","classCellSavedColors","getCellClass","gridId","getId","id","getClass","className","Tools","props","onClick","setMode","eraser","resetCanvas","download","Topnav","state","Component","SelectedColor","Range","item","type","step","onChange","funct","RangesGroup","changeColor","DropdownSelectColor","onMouseOver","setOpacity","onMouseOut","value","$","css","Cell","x","y","owner","Row","i","push","Grid","SavedColors","copyColor","ButtonSave","saveColor","ColorSettings","divId","slideToggle","CanvasSettings","isMobile","changeSize","Sidenav","Settings","selectedColor","savedColors","print","colorizeCell","bind","setState","setColors","val","changeColorGeneric","cellId","setDownloadImage","bgColor","document","getElementById","style","backgroundColor","setRGB","find","equals","lastId","getLastCellIDSavedColors","property","cells","index","setInFront","text","width","height","grid","setGridSize","changeGrid","axis","setCellSize","html2canvas","querySelector","then","canvas","image","toDataURL","replace","attr","Main","App","isTablet","Warning","PixelArt","withGetScreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4VAuBeA,E,WAtBX,WAAYC,EAAGC,EAAGC,GAAI,oBAClBC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,E,qDAIT,MAAO,OAASC,KAAKH,EAAI,IAAMG,KAAKF,EAAI,IAAME,KAAKD,EAAI,M,6BAGpDE,GACH,IAAIC,EAAWD,EAAIE,UAAU,EAAGF,EAAIG,OAAO,GAAGC,MAAM,KACpDH,EAA+B,IAApBA,EAASE,OAAe,CAAC,IAAK,IAAK,KAAOF,EACrDF,KAAKH,EAAIS,SAASJ,EAAS,IAC3BF,KAAKF,EAAIQ,SAASJ,EAAS,IAC3BF,KAAKD,EAAIO,SAASJ,EAAS,M,6BAGxBK,GACH,OAAOP,KAAKQ,WAAaD,EAAMC,a,KCZxBC,EAPX,WAAYC,EAAMC,EAASC,EAAMC,GAAS,oBACtCb,KAAKU,KAAOA,EACZV,KAAKW,QAAUA,EACfX,KAAKY,KAAOA,EACZZ,KAAKa,OAASA,GCHhBC,EAAS,ICDX,aAAe,oBACXd,KAAKH,EAAI,CACLkB,IAAK,OACLC,MAAO,SACPC,MAAO,SACPC,QAAS,IACTC,IAAK,EACLC,IAAK,KAETpB,KAAKF,EAAI,CACLiB,IAAK,QACLC,MAAO,SACPC,MAAO,SACPC,QAAS,GACTC,IAAK,EACLC,IAAK,KAETpB,KAAKD,EAAI,CACLgB,IAAK,OACLC,MAAO,SACPC,MAAO,SACPC,QAAS,EACTC,IAAK,EACLC,IAAK,MCtBXC,EAAY,ICDd,aAAe,oBACXrB,KAAKsB,IAAM,CACPP,IAAK,OACLC,MAAO,SACPC,MAAO,SACPC,QAAS,GACTC,IAAK,EACLC,IAAK,IAETpB,KAAKuB,OAAS,CACVR,IAAK,QACLC,MAAO,QACPC,MAAO,SACPC,QAAS,GACTC,IAAK,EACLC,IAAK,IAETpB,KAAKwB,SAAW,CACZT,IAAK,QACLC,MAAO,OACPC,MAAO,SACPC,QAAS,GACTC,IAAK,EACLC,IAAK,IAETpB,KAAKa,OAAS,CACVE,IAAK,QACLC,MAAO,SACPC,MAAO,cACPC,QAAS,EACTC,IAAK,EACLC,IAAK,GAETpB,KAAKyB,aAAe,CAChBC,SAAU,SACVC,cAAe,kBACfC,UAAW,QAEf5B,KAAKyB,aAAaI,gBAAkB7B,KAAKyB,aAAaG,UAAY5B,KAAKyB,aAAaC,SACpF1B,KAAKyB,aAAaK,qBAAuB9B,KAAKyB,aAAaG,UAAY5B,KAAKyB,aAAaE,eDpC3FI,EAAe,SAACC,GAAD,OAAYX,EAAUI,aAAaG,UAAYI,GEJ9DC,EAAQ,SAACC,GAAD,MAAQ,IAAMA,GACtBC,EAAW,SAACC,GAAD,MAAe,IAAMA,GCsBvBC,MAvBf,SAAeC,GACX,OACI,sBAAKJ,GAAG,QAAR,UACQ,wBAAQK,QAAS,kBAAMD,EAAME,SAAQ,IAArC,SACI,mBAAGJ,UAAU,yBAEjB,wBAAQG,QAAS,kBAAMD,EAAME,SAAQ,IAArC,SACI,mBAAGJ,UAAU,yBAEjB,wBAAQG,QAAS,kBAAMD,EAAMG,UAA7B,SACI,mBAAGL,UAAU,oBAEjB,wBAAQG,QAAS,kBAAMD,EAAMI,eAA7B,SACI,mBAAGN,UAAU,uBAEjB,mBAAGF,GAAG,YAAYS,SAAS,gBAA3B,SACI,iCACI,mBAAGP,UAAU,wBCStBQ,G,wDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,GAHE,E,qDAQf,OACI,qBAAKX,GAAG,SAAR,SACI,cAAC,EAAD,CACIM,QAASxC,KAAKsC,MAAME,QACpBC,OAAQzC,KAAKsC,MAAMG,OACnBC,YAAa1C,KAAKsC,MAAMI,oB,GAdvBI,cCDNC,MALf,WACI,OACI,qBAAKb,GAAG,gBAAR,qBCcOc,MAhBf,SAAeV,GACX,OACI,sBAAKF,UAAU,QAAf,UACI,uBAAOA,UAAU,aAAjB,SAA+BE,EAAMW,KAAKlC,MAD9C,IAC2D,uBACvD,uBAAOqB,UAAU,kBAAkBF,GAAII,EAAMW,KAAKhC,QAFtD,IAEsE,uBAClE,uBACImB,UAAU,aACVF,GAAII,EAAMW,KAAKjC,MACfkC,KAAK,QACL/B,IAAKmB,EAAMW,KAAK9B,IAChBC,IAAKkB,EAAMW,KAAK7B,IAChB+B,KAAK,IACLC,SAAU,kBAAMd,EAAMe,eCAvBC,MATf,SAAqBhB,GACjB,OACI,sBAAKF,UAAU,mBAAf,UACI,cAAC,EAAD,CAAOa,KAAMnC,EAAOjB,EAAGwD,MAAOf,EAAMiB,cACpC,cAAC,EAAD,CAAON,KAAMnC,EAAOhB,EAAGuD,MAAOf,EAAMiB,cACpC,cAAC,EAAD,CAAON,KAAMnC,EAAOf,EAAGsD,MAAOf,EAAMiB,kBCKjCC,MARf,SAA6BlB,GACzB,OACI,sBAAKF,UAAU,WAAWqB,YAAa,kBAAMC,EAAW,KAAMC,WAAY,kBAAMD,EAAW,IAA3F,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAaH,YAAajB,EAAMiB,kBAM5C,SAASG,EAAWE,GAChBC,IAAE,WAAWC,IAAI,UAAWF,GCRjBG,MANf,SAAczB,GACV,ITAe0B,EAAGC,ESAd/B,GTAW8B,ESAI1B,EAAM0B,ETAPC,ESAU3B,EAAM2B,EAAG3B,EAAMJ,GTAF8B,EAAI,IAAMC,GSCnD,OACI,oBAAIC,MAAO5B,EAAMJ,GAAIA,GAAIA,EAAIE,UAAWL,EAAaO,EAAMJ,IAAKK,QAAS,kBAAMD,EAAMe,MAAMnB,OCIpFiC,MAPf,SAAa7B,GAET,IADA,IAAI3B,EAAU,GACNyD,EAAI,EAAGA,EAAI9B,EAAM3B,QAASyD,IAC9BzD,EAAQ0D,KAAK,cAAC,EAAD,CAAcL,EAAGI,EAAGH,EAAG3B,EAAMhB,IAAK+B,MAAOf,EAAMe,MAAOnB,GAAII,EAAMJ,IAArDkC,IAE5B,OAAQ,6BAAKzD,KCEF2D,MAPf,SAAchC,GAEV,IADA,IAAI5B,EAAO,GACF0D,EAAI,EAAGA,EAAI9B,EAAM5B,KAAM0D,IAC5B1D,EAAK2D,KAAK,cAAC,EAAD,CAAa1D,QAAS2B,EAAM3B,QAASW,IAAK8C,EAAGf,MAAOf,EAAMe,MAAOnB,GAAII,EAAMJ,IAAjEkC,IAExB,OAAQ,uBAAOlC,GAAII,EAAMJ,GAAIE,UAAU,OAA/B,SAAsC,gCAAQ1B,OCM3C6D,MAVf,SAAqBjC,GACjB,OACI,gCACI,mDACA,8BACI,cAAC,EAAD,CAAM5B,KAAM,EAAGC,QAAS,GAAI0C,MAAOf,EAAMkC,UAAWtC,GAAIb,EAAUI,aAAaE,sBCChF8C,MATf,SAAoBnC,GAChB,OACI,iCACI,yBAAQJ,GAAG,aAAaK,QAAS,kBAAMD,EAAMoC,aAA7C,UACI,mBAAGtC,UAAU,gBADjB,8B,MCmBGuC,MAbf,SAAuBrC,GACnB,IAAMsC,EAAQ,oBACd,OACI,gCACI,mBAAGrC,QAAS,kBAAMsB,IAAE5B,EAAM2C,IAAQC,eAAlC,mBACA,sBAAK3C,GAAI0C,EAAT,UACI,cAAC,EAAD,CAAqBrB,YAAajB,EAAMiB,cACxC,cAAC,EAAD,CAAqBmB,UAAWpC,EAAMoC,YACtC,cAAC,EAAD,CAAqBF,UAAWlC,EAAMkC,mBCKvCM,MAhBf,SAAwBxC,GACpB,IAAMsC,EAAQ,mBACV3B,EAAO5B,EAAUE,OAErB,OADA0B,EAAK7B,IAAMkB,EAAMyC,SAAW,GAAK9B,EAAK7B,IAElC,sBAAKgB,UAAU,SAAf,UACI,mBAAGG,QAAS,kBAAMsB,IAAE5B,EAAM2C,IAAQC,eAAlC,oBACA,sBAAK3C,GAAI0C,EAAT,UACI,cAAC,EAAD,CAAO3B,KAAM5B,EAAUE,OAAU8B,MAAOf,EAAM0C,aAC9C,cAAC,EAAD,CAAO/B,KAAM5B,EAAUC,IAAU+B,MAAOf,EAAM0C,aAC9C,cAAC,EAAD,CAAO/B,KAAM5B,EAAUG,SAAU6B,MAAOf,EAAM0C,aAC9C,cAAC,EAAD,CAAO/B,KAAM5B,EAAUR,OAAUwC,MAAOf,EAAM0C,oBCY/CC,G,wDArBX,WAAY3C,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,GAHE,E,qDAQf,OACI,sBAAKT,UAAU,UAAf,UACI,cAAC,EAAD,CACImB,YAAavD,KAAKsC,MAAMiB,YACxBmB,UAAW1E,KAAKsC,MAAMoC,UACtBF,UAAWxE,KAAKsC,MAAMkC,YAE1B,cAAC,EAAD,CAAgBQ,WAAYhF,KAAKsC,MAAM0C,WAAYD,SAAU/E,KAAKsC,MAAMyC,WACxE,uBAAK,8B,GAjBCjC,cCgLPoC,E,kDAzKX,WAAY5C,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,CACTsC,cAAe,IAAIvF,EAAUkB,EAAOjB,EAAEqB,QAASJ,EAAOhB,EAAEoB,QAASJ,EAAOf,EAAEmB,SAC1EkE,YAAa,IALF,E,oDAaXC,GACJ,OAAOA,EACHrF,KAAKsC,MAAME,QAAQxC,KAAKsF,aAAaC,KAAKvF,OAC1CA,KAAKsC,MAAME,QAAQxC,KAAKwE,UAAUe,KAAKvF,S,yCAO5BO,GACf,IAAIsC,EAAQ7C,KAAK6C,MACjBA,EAAMsC,cAAgB5E,EACtBP,KAAKwF,SAAS,CAAE3C,UAChB7C,KAAKyF,c,oCAKL,IAAI5F,EAAIgE,IAAE5B,EAAMnB,EAAOjB,EAAEmB,QAAQ0E,MAC7B5F,EAAI+D,IAAE5B,EAAMnB,EAAOhB,EAAEkB,QAAQ0E,MAC7B3F,EAAI8D,IAAE5B,EAAMnB,EAAOf,EAAEiB,QAAQ0E,MAC7BnF,EAAQ,IAAIX,EAAUC,EAAGC,EAAGC,GAChCC,KAAK2F,mBAAmBpF,K,+BAKxB,IAAIA,EAAQ,IAAIX,EAAU,IAAK,IAAK,KACpCI,KAAK2F,mBAAmBpF,K,oCAKxBsD,IAAE1B,EAASd,EAAUI,aAAaI,kBAAkBiC,IAAI,mBAAoB,W,mCAKnE8B,GACT/B,IAAE5B,EAAM2D,IAAS9B,IAAI,mBAAoB9D,KAAK6C,MAAMsC,cAAc3E,UAClEqF,M,gCAKMD,GACN,IAAIE,EAAUC,SAASC,eAAeJ,GAAQK,MAAMC,gBAChD3F,EAAQ,IAAIX,EAChBW,EAAM4F,OAAOL,GACb9F,KAAKwC,SAAQ,GACbxC,KAAK2F,mBAAmBpF,K,kCAIf,IAAD,OAER,IADgC,EAAKsC,MAAMuC,YAAYgB,MAAK,SAAA7F,GAAK,OAAIA,EAAM8F,OAAO,EAAKxD,MAAMsC,kBAC7F,CAGA,IAAImB,EAAStG,KAAKuG,2BAClBvG,KAAKsF,aAAagB,GAElB,IAAIzD,EAAQ7C,KAAK6C,MACjBA,EAAMuC,YAAYf,KAAKrE,KAAK6C,MAAMsC,eAClCnF,KAAKwF,SAAS,CAAE3C,a,iDAOhB,IAFA,If/Fa2D,EAAU5C,Ee+FnB6C,EAAQ5C,Kf/FC2C,Ee+Fa,Qf/FH5C,Ee+FYvC,EAAUI,aAAaE,cf/FzB,IAAM6E,EAAW,KAAO5C,EAAQ,OegG7D8C,EAAQ,EACHtC,EAAI,EAAGA,EAAIqC,EAAMrG,OAAQgE,IAC9B,GAA8C,IAA1CqC,EAAMrC,GAAG6B,MAAMC,gBAAgB9F,OAAc,CAC7CsG,EAAQtC,EACR,MAGR,OAAOqC,EAAMC,GAAOxE,K,kCAIX,IAAD,OACJyE,EAAa,SAAC3F,EAAOC,EAAOV,GAC5B,IAAIqD,EAAQ,EAAKf,MAAMsC,cAAc5E,GACrCsD,IAAE5B,EAAMhB,IAAQ2F,KAAKhD,GACrBC,IAAE5B,EAAMjB,IAAQ0E,IAAI9B,IAExB+C,EAAW7F,EAAOjB,EAAEmB,MAAOF,EAAOjB,EAAEoB,MAAO,KAC3C0F,EAAW7F,EAAOhB,EAAEkB,MAAOF,EAAOhB,EAAEmB,MAAO,KAC3C0F,EAAW7F,EAAOf,EAAEiB,MAAOF,EAAOf,EAAEkB,MAAO,KAC3CjB,KAAKsF,aAAa,mB,mCAQlB,IAAIuB,EAAQhD,IAAE5B,EAAMZ,EAAUE,OAAOP,QAAQ0E,MACzCoB,EAASjD,IAAE5B,EAAMZ,EAAUC,IAAIN,QAAQ0E,MACvC9E,EAAOiD,IAAE5B,EAAMZ,EAAUG,SAASR,QAAQ0E,MAC1C7E,EAASgD,IAAE5B,EAAMZ,EAAUR,OAAOG,QAAQ0E,MAC1CqB,EAAO,IAAItG,EAASqG,EAAQD,EAAOjG,EAAMC,GAC7Cb,KAAKgH,cACLhH,KAAKsC,MAAM2E,WAAWF,K,oCAIX,IAAD,OACNJ,EAAa,SAAC3F,EAAOC,EAAOiG,GAC5B,IAAItD,EAAQ,EAAKtB,MAAMyE,KAAKG,GAC5BrD,IAAE5B,EAAMhB,IAAQ2F,KAAKhD,GACrBC,IAAE5B,EAAMjB,IAAQ0E,IAAI9B,IAExB+C,EAAWtF,EAAUE,OAAOP,MAAOK,EAAUE,OAAON,MAAO,WAC3D0F,EAAWtF,EAAUC,IAAIN,MAAOK,EAAUC,IAAIL,MAAO,QACrD0F,EAAWtF,EAAUG,SAASR,MAAOK,EAAUG,SAASP,MAAO,QAC/D0F,EAAWtF,EAAUR,OAAOG,MAAOK,EAAUR,OAAOI,MAAO,UAC3DjB,KAAKmH,cACLtB,M,oCAKAhC,IAAE1B,EAASd,EAAUI,aAAaI,kBAAkBiC,IAAI,QAAS9D,KAAKsC,MAAMyE,KAAKnG,MACjFiD,IAAE1B,EAASd,EAAUI,aAAaI,kBAAkBiC,IAAI,SAAU9D,KAAKsC,MAAMyE,KAAKnG,MAClFiD,IAAE1B,EAASd,EAAUI,aAAaI,kBAAkBiC,IAAI,SAAU9D,KAAKsC,MAAMyE,KAAKlG,OAAS,oB,0CAI3Fb,KAAKyF,YACLzF,KAAKgH,cACLhH,KAAKwC,SAAQ,K,+BAKb,OACI,gCACI,cAAC,EAAD,CACIA,QAASxC,KAAKwC,QAAQ+C,KAAKvF,MAC3ByC,OAAQzC,KAAKyC,OAAO8C,KAAKvF,MACzB0C,YAAa1C,KAAK0C,YAAY6C,KAAKvF,QAEvC,cAAC,EAAD,CACIgF,WAAYhF,KAAKgF,WAAWO,KAAKvF,MACjCuD,YAAavD,KAAKuD,YAAYgC,KAAKvF,MACnC0E,UAAW1E,KAAK0E,UAAUa,KAAKvF,MAC/BwE,UAAWxE,KAAKwE,UAAUe,KAAKvF,MAC/B+E,SAAU/E,KAAKsC,MAAMyC,kB,GApKlBjC,aA6KvB,SAAS+C,IACLuB,IAAYrB,SAASsB,cAAcpF,EAAMZ,EAAUI,aAAaC,YAAY4F,MAAK,SAAAC,GAC7E,IAAIC,EAAQD,EAAOE,UAAU,aAAaC,QAAQ,YAAa,sBAC/D7D,IAAE,cAAc8D,KAAK,OAAQH,MC9KtBI,MAZf,SAActF,GACN,OACI,qBAAKF,UAAU,OAAf,SACI,cAAC,EAAD,CACI1B,KAAM4B,EAAMyE,KAAKrG,KACjBC,QAAS2B,EAAMyE,KAAKpG,QACpB0C,MAAOf,EAAMe,MACbnB,GAAIb,EAAUI,aAAaC,cCCzCmG,E,kDACJ,WAAYvF,GAAQ,IAAD,8BACjB,cAAMA,IAEDO,MAAQ,CACXQ,MAAO,aACP0D,KAAM,IAAItG,EAASY,EAAUC,IAAIJ,QAC/BG,EAAUE,OAAOL,QACjBG,EAAUG,SAASN,QACnBG,EAAUR,OAAOK,UARJ,E,oDAaXmC,GACN,IAAIR,EAAQ7C,KAAK6C,MACjBA,EAAMQ,MAAQA,EACdrD,KAAKwF,SAAS,CAAE3C,Y,iCAIPkE,GACT,IAAIlE,EAAQ7C,KAAK6C,MACjBA,EAAMkE,KAAOA,EACb/G,KAAKwF,SAAS,CAAE3C,Y,iCAIhB,OACE,gCACE,cAAC,EAAD,CAAUkC,SAAU/E,KAAKsC,MAAMwF,WAAYf,KAAM/G,KAAK6C,MAAMkE,KAAMvE,QAASxC,KAAKwC,QAAQ+C,KAAKvF,MAAOiH,WAAYjH,KAAKiH,WAAW1B,KAAKvF,QACrI,cAAC,EAAD,CAAM+G,KAAM/G,KAAK6C,MAAMkE,KAAM1D,MAAOrD,KAAK6C,MAAMQ,a,gCAMnD,OACE,qBAAKnB,GAAG,UAAR,SACE,+F,+BAMJ,OAAIlC,KAAKsC,MAAMyC,WAAmB/E,KAAK+H,UAChC/H,KAAKgI,e,GA9CElF,aAkDHmF,0BAAcJ,GCjDdK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAASC,eAAe,SAG1BkC,M","file":"static/js/main.e22187c0.chunk.js","sourcesContent":["class ColorBean {\r\n    constructor(r, g, b) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n    }\r\n\r\n    getRGB() {\r\n        return \"rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\r\n    }\r\n\r\n    setRGB(rgb) {\r\n        let rgbArray = rgb.substring(4, rgb.length-1).split(\",\");\r\n        rgbArray = rgbArray.length !== 3 ? [255, 255, 255] : rgbArray;\r\n        this.r = parseInt(rgbArray[0]);\r\n        this.g = parseInt(rgbArray[1]);\r\n        this.b = parseInt(rgbArray[2]);\r\n    }\r\n\r\n    equals(color) {\r\n        return this.getRGB() === color.getRGB();\r\n    }\r\n}\r\nexport default ColorBean;","class GridBean {\r\n    constructor(rows, columns, size, border) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.size = size;\r\n        this.border = border;\r\n    }\r\n}\r\nexport default GridBean;","import ColorCfg from \"../classes/ColorCfg\";\r\n\r\nconst rgbCfg = new ColorCfg();\r\n\r\nexport { rgbCfg }","class ColorCfg {\r\n    constructor() {\r\n        this.r = {\r\n            txt: \"Rojo\",\r\n            range: \"rangeR\",\r\n            label: \"labelR\",\r\n            default: 150,\r\n            min: 0,\r\n            max: 255\r\n        };\r\n        this.g = {\r\n            txt: \"Verde\",\r\n            range: \"rangeG\",\r\n            label: \"labelG\",\r\n            default: 50,\r\n            min: 0,\r\n            max: 255\r\n        };\r\n        this.b = {\r\n            txt: \"Azul\",\r\n            range: \"rangeB\",\r\n            label: \"labelB\",\r\n            default: 0,\r\n            min: 0,\r\n            max: 255\r\n        }\r\n    }\r\n}\r\nexport default ColorCfg;","import CanvasCfg from \"../classes/CanvasCfg\";\r\n\r\nconst canvasCfg = new CanvasCfg();\r\nconst getCellId = (x, y, gridId) => gridId + x + \"-\" + y;\r\nconst getCellClass = (gridId) => canvasCfg.htmlSettings.classCell + gridId;\r\n\r\nexport { canvasCfg, getCellId, getCellClass };","class CanvasCfg {\r\n    constructor() {\r\n        this.row = {\r\n            txt: \"Alto\",\r\n            range: \"height\",\r\n            label: \"labelH\",\r\n            default: 20,\r\n            min: 1,\r\n            max: 30\r\n        };\r\n        this.column = {\r\n            txt: \"Ancho\",\r\n            range: \"width\",\r\n            label: \"labelW\",\r\n            default: 20,\r\n            min: 1,\r\n            max: 30\r\n        };\r\n        this.cellSize = {\r\n            txt: \"Celda\",\r\n            range: \"size\",\r\n            label: \"labelS\",\r\n            default: 15,\r\n            min: 7,\r\n            max: 15\r\n        };\r\n        this.border = {\r\n            txt: \"Borde\",\r\n            range: \"border\",\r\n            label: \"labelBorder\",\r\n            default: 1,\r\n            min: 0,\r\n            max: 2\r\n        };\r\n        this.htmlSettings = {\r\n            idCanvas: \"canvas\",\r\n            idSavedColors: \"gridSavedColors\",\r\n            classCell: \"cell\",\r\n        };\r\n        this.htmlSettings.classCellCanvas = this.htmlSettings.classCell + this.htmlSettings.idCanvas;\r\n        this.htmlSettings.classCellSavedColors = this.htmlSettings.classCell + this.htmlSettings.idSavedColors;\r\n    }\r\n}\r\nexport default CanvasCfg;","const getId = (id) => \"#\" + id;\r\nconst getClass = (className) => \".\" + className;\r\nconst getProperty = (property, value) => \"[\" + property + \"='\" + value + \"']\";\r\n\r\nexport { getId, getClass, getProperty };","function Tools(props) {\r\n    return (\r\n        <div id=\"tools\">\r\n                <button onClick={() => props.setMode(true)}>\r\n                    <i className='fas fa-paint-brush'></i>\r\n                </button>\r\n                <button onClick={() => props.setMode(false)}>\r\n                    <i className='fas fa-eye-dropper'></i>\r\n                </button>\r\n                <button onClick={() => props.eraser()}>\r\n                    <i className='fas fa-eraser'></i>\r\n                </button>\r\n                <button onClick={() => props.resetCanvas()}>\r\n                    <i className='fas fa-trash-alt'></i>\r\n                </button>\r\n                <a id=\"saveImage\" download=\"pixel-art.png\" >\r\n                    <button>\r\n                        <i className='fas fa-save'></i>\r\n                    </button>\r\n                </a>\r\n        </div>\r\n    )\r\n}\r\nexport default Tools;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Tools from \"./tools/Tools\";\r\n\r\nimport \"./Topnav.css\";\r\n\r\nclass Topnav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"topnav\">\r\n                <Tools\r\n                    setMode={this.props.setMode}\r\n                    eraser={this.props.eraser}\r\n                    resetCanvas={this.props.resetCanvas}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Topnav;","function SelectedColor() {\r\n    return (\r\n        <div id=\"selectedColor\"> &nbsp; </div>\r\n    );\r\n}\r\nexport default SelectedColor;\r\n","function Range(props) {\r\n    return (\r\n        <div className=\"range\">\r\n            <label className=\"labelRange\">{props.item.txt}</label> <br />\r\n            <label className=\"labelRangeValue\" id={props.item.label}></label> <br />\r\n            <input\r\n                className=\"inputRange\"\r\n                id={props.item.range}\r\n                type=\"range\"\r\n                min={props.item.min}\r\n                max={props.item.max}\r\n                step=\"1\"\r\n                onChange={() => props.funct()}></input>\r\n        </div>\r\n    )\r\n}\r\nexport default Range;","import Range from \"../../../../../range/Range\";\r\nimport { rgbCfg } from \"../../../../../../util/ColorUtil\";\r\n\r\nfunction RangesGroup(props) {\r\n    return (\r\n        <div className=\"dropdown-content\">\r\n            <Range item={rgbCfg.r} funct={props.changeColor} />\r\n            <Range item={rgbCfg.g} funct={props.changeColor} />\r\n            <Range item={rgbCfg.b} funct={props.changeColor} />\r\n        </div>\r\n    )\r\n}\r\nexport default RangesGroup;","import $ from \"jquery\";\r\n\r\nimport SelectedColor from \"./selectedcolor/SelectedColor\";\r\nimport RangesGroup from \"./rangesgroup/RangesGroup\";\r\n\r\nfunction DropdownSelectColor(props) {\r\n    return (\r\n        <div className=\"dropdown\" onMouseOver={() => setOpacity(0.1)} onMouseOut={() => setOpacity(1)}>\r\n            <SelectedColor />\r\n            <RangesGroup changeColor={props.changeColor} />\r\n        </div>\r\n    );\r\n}\r\nexport default DropdownSelectColor;\r\n\r\nfunction setOpacity(value) {\r\n    $(\".opaque\").css(\"opacity\", value);\r\n}","import { getCellId, getCellClass } from \"../../../../util/GridUtil\";\r\n\r\nfunction Cell(props) {\r\n    let id = getCellId(props.x, props.y, props.id);\r\n    return (\r\n        <td owner={props.id} id={id} className={getCellClass(props.id)} onClick={() => props.funct(id)}></td>\r\n    );\r\n}\r\nexport default Cell;","import Cell from \"./cell/Cell\";\r\n\r\nfunction Row(props){\r\n    let columns = [];\r\n    for(let i = 0; i < props.columns; i++)\r\n        columns.push(<Cell key={i} x={i} y={props.row} funct={props.funct} id={props.id} />);\r\n        \r\n    return (<tr>{columns}</tr>);\r\n}\r\nexport default Row;","import Row from \"./row/Row\";\r\n\r\nfunction Grid(props) {\r\n    let rows = [];\r\n    for (let i = 0; i < props.rows; i++)\r\n        rows.push(<Row key={i} columns={props.columns} row={i} funct={props.funct} id={props.id} />);\r\n\r\n    return (<table id={props.id} className=\"grid\"><tbody>{rows}</tbody></table>);\r\n}\r\nexport default Grid;","import Grid from \"../../../../grid/Grid\";\r\nimport { canvasCfg } from \"../../../../../util/GridUtil\";\r\n\r\nfunction SavedColors(props) {\r\n    return (\r\n        <div>\r\n            <h5>Colores guardados</h5>\r\n            <div>\r\n                <Grid rows={4} columns={12} funct={props.copyColor} id={canvasCfg.htmlSettings.idSavedColors} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SavedColors;","function ButtonSave(props) {\r\n    return (\r\n        <center>\r\n            <button id=\"buttonSave\" onClick={() => props.saveColor()}>\r\n                <i className='fas fa-save'></i>&nbsp;&nbsp;Guardar color\r\n            </button>\r\n        </center>\r\n    );\r\n}\r\nexport default ButtonSave;","import $ from \"jquery\";\r\n\r\nimport DropdownSelectColor from \"./dropdownselectcolor/DropdownSelectColor\";\r\nimport SavedColors from \"./savedcolors/SavedColors\";\r\nimport ButtonSave from \"./buttonsave/ButtonSave\";\r\nimport { getId } from \"../../../../util/JQueryUtil\";\r\n\r\nimport \"./ColorSettings.css\";\r\n\r\nfunction ColorSettings(props) {\r\n    const divId = \"bodyColorSettings\";\r\n    return (\r\n        <div>\r\n            <p onClick={() => $(getId(divId)).slideToggle()}>Color</p>\r\n            <div id={divId}>\r\n                <DropdownSelectColor changeColor={props.changeColor} />\r\n                <ButtonSave          saveColor={props.saveColor}     />\r\n                <SavedColors         copyColor={props.copyColor}     />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ColorSettings;","import $ from \"jquery\";\r\n\r\nimport Range from \"../../../range/Range\";\r\nimport { canvasCfg } from \"../../../../util/GridUtil\";\r\nimport { getId } from \"../../../../util/JQueryUtil\";\r\n\r\nfunction CanvasSettings(props) {\r\n    const divId = \"bodySizeSettings\";\r\n    let item = canvasCfg.column;\r\n    item.max = props.isMobile ? 20 : item.max;\r\n    return (\r\n        <div className=\"opaque\">\r\n            <p onClick={() => $(getId(divId)).slideToggle()}>Lienzo</p>\r\n            <div id={divId}>\r\n                <Range item={canvasCfg.column}   funct={props.changeSize} />\r\n                <Range item={canvasCfg.row}      funct={props.changeSize} />\r\n                <Range item={canvasCfg.cellSize} funct={props.changeSize} />\r\n                <Range item={canvasCfg.border}   funct={props.changeSize} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CanvasSettings;","import React, { Component } from \"react\";\r\n\r\nimport ColorSettings from \"./colorsettings/ColorSettings\";\r\nimport CanvasSettings from \"./canvassettings/CanvasSettings\";\r\n\r\nimport \"./Sidenav.css\";\r\n\r\nclass Sidenav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sidenav\">\r\n                <ColorSettings\r\n                    changeColor={this.props.changeColor}\r\n                    saveColor={this.props.saveColor}\r\n                    copyColor={this.props.copyColor}\r\n                />\r\n                <CanvasSettings changeSize={this.props.changeSize} isMobile={this.props.isMobile} />\r\n                <br/><br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Sidenav;","import React, { Component } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport $ from \"jquery\";\r\n\r\nimport ColorBean from \"../../classes/ColorBean\";\r\nimport GridBean from \"../../classes/GridBean\";\r\nimport { rgbCfg } from \"../../util/ColorUtil\";\r\nimport { canvasCfg } from \"../../util/GridUtil\";\r\nimport { getId, getClass, getProperty } from \"../../util/JQueryUtil\";\r\n\r\nimport Topnav from \"./topnav/Topnav\";\r\nimport Sidenav from \"./sidenav/Sidenav\";\r\n\r\nclass Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedColor: new ColorBean(rgbCfg.r.default, rgbCfg.g.default, rgbCfg.b.default),\r\n            savedColors: []\r\n        }\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* MODE */\r\n\r\n    /* Receives a boolean in parameter and calls setMode() function of App.js */\r\n    setMode(print) {\r\n        return print ?\r\n            this.props.setMode(this.colorizeCell.bind(this)) :\r\n            this.props.setMode(this.copyColor.bind(this));\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* COLORS */\r\n\r\n    /* Receives a color in parameter and modifies the selectedColor attribute in state */\r\n    changeColorGeneric(color) {\r\n        let state = this.state;\r\n        state.selectedColor = color;\r\n        this.setState({ state });\r\n        this.setColors();\r\n    }\r\n\r\n    /* Creates a color with values of ranges, and calls changeColorGeneric() */\r\n    changeColor() {\r\n        let r = $(getId(rgbCfg.r.range)).val();\r\n        let g = $(getId(rgbCfg.g.range)).val();\r\n        let b = $(getId(rgbCfg.b.range)).val();\r\n        let color = new ColorBean(r, g, b);\r\n        this.changeColorGeneric(color);\r\n    }\r\n\r\n    /* Creates a white color, and calls changeColorGeneric() */\r\n    eraser() {\r\n        let color = new ColorBean(255, 255, 255);\r\n        this.changeColorGeneric(color);\r\n    }\r\n\r\n    /* Sets a white backgroundColor in canvas */\r\n    resetCanvas() {\r\n        $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"background-color\", \"white\");\r\n    }\r\n\r\n    /*  Receives a cellId in parameter and \r\n    modifies its backgroundColor with the selectedColor attribute in state */\r\n    colorizeCell(cellId) {\r\n        $(getId(cellId)).css(\"background-color\", this.state.selectedColor.getRGB());\r\n        setDownloadImage();\r\n    }\r\n\r\n    /* Receives a cellId in parameter, creates a color with its backgroundColor and\r\n    calls changeColorGeneric() */\r\n    copyColor(cellId) {\r\n        let bgColor = document.getElementById(cellId).style.backgroundColor;\r\n        let color = new ColorBean();\r\n        color.setRGB(bgColor);\r\n        this.setMode(true);\r\n        this.changeColorGeneric(color);\r\n    }\r\n\r\n    /* Looking for the last cellId without backgroundColor and calls colorizeCell() */\r\n    saveColor() {\r\n        let colorIsAlreadySaved = () => this.state.savedColors.find(color => color.equals(this.state.selectedColor));\r\n        if (colorIsAlreadySaved()) {\r\n            return;\r\n        }\r\n        let lastId = this.getLastCellIDSavedColors();\r\n        this.colorizeCell(lastId);\r\n\r\n        let state = this.state;\r\n        state.savedColors.push(this.state.selectedColor);\r\n        this.setState({ state });\r\n    }\r\n\r\n    /* Returns the last cellId without backgroundColor */\r\n    getLastCellIDSavedColors() {\r\n        let cells = $(getProperty(\"owner\", canvasCfg.htmlSettings.idSavedColors));\r\n        let index = 0;\r\n        for (let i = 0; i < cells.length; i++) {\r\n            if (cells[i].style.backgroundColor.length === 0) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        return cells[index].id;\r\n    }\r\n\r\n    /* modifies values in the website and the background color of selectedColor's cell */\r\n    setColors() {\r\n        let setInFront = (range, label, color) => {\r\n            let value = this.state.selectedColor[color];\r\n            $(getId(label)).text(value);\r\n            $(getId(range)).val(value);\r\n        };\r\n        setInFront(rgbCfg.r.range, rgbCfg.r.label, \"r\");\r\n        setInFront(rgbCfg.g.range, rgbCfg.g.label, \"g\");\r\n        setInFront(rgbCfg.b.range, rgbCfg.b.label, \"b\");\r\n        this.colorizeCell(\"selectedColor\");\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* SIZE */\r\n\r\n    /* Create a grid with values of ranges and calls changeGrid() function of App.js and setGridSize() */\r\n    changeSize() {\r\n        let width = $(getId(canvasCfg.column.range)).val();\r\n        let height = $(getId(canvasCfg.row.range)).val();\r\n        let size = $(getId(canvasCfg.cellSize.range)).val();\r\n        let border = $(getId(canvasCfg.border.range)).val();\r\n        let grid = new GridBean(height, width, size, border);\r\n        this.setGridSize();\r\n        this.props.changeGrid(grid);\r\n    }\r\n\r\n    /* modifies values in the website with the grid in props and calls setCellSize() */\r\n    setGridSize() {\r\n        let setInFront = (range, label, axis) => {\r\n            let value = this.props.grid[axis];\r\n            $(getId(label)).text(value);\r\n            $(getId(range)).val(value);\r\n        };\r\n        setInFront(canvasCfg.column.range, canvasCfg.column.label, \"columns\");\r\n        setInFront(canvasCfg.row.range, canvasCfg.row.label, \"rows\");\r\n        setInFront(canvasCfg.cellSize.range, canvasCfg.cellSize.label, \"size\");\r\n        setInFront(canvasCfg.border.range, canvasCfg.border.label, \"border\");\r\n        this.setCellSize();\r\n        setDownloadImage();\r\n    }\r\n\r\n    /* Modifies the width and height of cells with the grid in props */\r\n    setCellSize() {\r\n        $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"width\", this.props.grid.size);\r\n        $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"height\", this.props.grid.size);\r\n        $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"border\", this.props.grid.border + \"px solid black\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setColors();\r\n        this.setGridSize();\r\n        this.setMode(true);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Topnav \r\n                    setMode={this.setMode.bind(this)}\r\n                    eraser={this.eraser.bind(this)}\r\n                    resetCanvas={this.resetCanvas.bind(this)}\r\n                />\r\n                <Sidenav\r\n                    changeSize={this.changeSize.bind(this)}\r\n                    changeColor={this.changeColor.bind(this)}\r\n                    saveColor={this.saveColor.bind(this)}\r\n                    copyColor={this.copyColor.bind(this)}\r\n                    isMobile={this.props.isMobile}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Settings;\r\n\r\n\r\nfunction setDownloadImage() {\r\n    html2canvas(document.querySelector(getId(canvasCfg.htmlSettings.idCanvas))).then(canvas => {\r\n        var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        $(\"#saveImage\").attr(\"href\", image);\r\n    });\r\n}","import Grid from \"../grid/Grid\";\r\nimport { canvasCfg } from \"../../util/GridUtil\";\r\n\r\nfunction Main(props) {\r\n        return (\r\n            <div className=\"main\">\r\n                <Grid\r\n                    rows={props.grid.rows}\r\n                    columns={props.grid.columns}\r\n                    funct={props.funct}\r\n                    id={canvasCfg.htmlSettings.idCanvas}\r\n                />\r\n            </div>\r\n        );\r\n}\r\nexport default Main;","import React, { Component } from \"react\";\nimport { withGetScreen } from 'react-getscreen';\nimport \"./App.css\";\nimport \"./components/grid/Grid.css\";\n\nimport Settings from \"./components/settings/Settings\";\nimport Main from \"./components/main/Main\";\nimport GridBean from \"./classes/GridBean\";\nimport { canvasCfg } from \"./util/GridUtil\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      funct: () => { },\n      grid: new GridBean(canvasCfg.row.default,\n        canvasCfg.column.default,\n        canvasCfg.cellSize.default,\n        canvasCfg.border.default),\n    }\n  }\n\n  /* Modifies the funct attribute in the state */\n  setMode(funct) {\n    let state = this.state;\n    state.funct = funct;\n    this.setState({ state });\n  }\n\n  /* Modifies the grid attribute in the state */\n  changeGrid(grid) {\n    let state = this.state;\n    state.grid = grid;\n    this.setState({ state });\n  }\n\n  PixelArt() {\n    return (\n      <div>\n        <Settings isMobile={this.props.isTablet()} grid={this.state.grid} setMode={this.setMode.bind(this)} changeGrid={this.changeGrid.bind(this)} />\n        <Main grid={this.state.grid} funct={this.state.funct} />\n      </div>\n    );\n  }\n\n  Warning() {\n    return (\n      <div id=\"warning\">\n        <h1>Por favor, voltea el dispositivo para poder usar PixelArt</h1>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.props.isMobile()) return this.Warning();\n    return this.PixelArt();\n  }\n}\n\nexport default withGetScreen(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}