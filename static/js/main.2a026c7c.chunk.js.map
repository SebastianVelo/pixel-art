{"version":3,"sources":["classes/ColorBean.js","components/modal/Modal.js","components/settings/sidenav/tools/Tools.js","components/settings/sidenav/colorsettings/dropdownselectcolor/selectedcolor/SelectedColor.js","components/range/Range.js","util/JQueryUtil.js","util/ColorUtil.js","classes/ColorCfg.js","components/settings/sidenav/colorsettings/dropdownselectcolor/rangesgroup/RangesGroup.js","components/settings/sidenav/colorsettings/dropdownselectcolor/DropdownSelectColor.js","classes/GridBean.js","util/GridUtil.js","classes/CanvasCfg.js","components/grid/row/cell/Cell.js","components/grid/row/Row.js","components/grid/Grid.js","components/settings/sidenav/colorsettings/savedcolors/SavedColors.js","components/settings/sidenav/colorsettings/buttonsave/ButtonSave.js","components/settings/sidenav/colorsettings/ColorSettings.js","components/settings/sidenav/canvassettings/CanvasSettings.js","components/settings/sidenav/Sidenav.js","util/Html2CanvasUtil.js","components/settings/Settings.js","components/main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["ColorBean","r","g","b","this","rgb","rgbArray","substring","length","split","parseInt","color","getRGB","Modal","props","id","className","onClick","closeModal","txt","doSomething","funct","getModal","document","getElementById","style","display","Tools","classNameActive","idReset","setMode","eraserMode","printMode","eraser","download","resetCanvas","SelectedColor","Range","item","label","range","type","min","max","step","onChange","getId","getClass","setInFront","value","$","text","val","rgbCfg","default","defaultSavedColors","colorizeCell","cellId","css","setColors","RangesGroup","changeColor","DropdownSelectColor","onMouseOver","setOpacity","onMouseOut","GridBean","rows","columns","size","border","canvasCfg","row","column","cellSize","htmlSettings","idCanvas","idSavedColors","classCell","classCellCanvas","classCellSavedColors","getCellClass","gridId","getLastCellIDSavedColors","property","cells","index","i","backgroundColor","setGridSize","grid","setCellSize","Cell","x","y","owner","Row","push","Grid","SavedColors","copyColor","ButtonSave","saveColor","ColorSettings","divId","slideToggle","CanvasSettings","isMobile","changeSize","Sidenav","state","Component","setDownloadImage","html2canvas","querySelector","then","canvas","image","toDataURL","replace","attr","Settings","selectedColor","savedColors","print","setState","colorizeCellWithSelectedColor","bind","setSelectedColor","getColorFromRanges","bgColor","setRGB","find","equals","lastId","forEach","Array","prototype","apply","width","height","getGridFromRanges","changeGrid","fillDefaultSavedColors","prevProps","toString","Main","App","isTablet","Warning","PixelArt","withGetScreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2a026c7c.chunk.js","sourcesContent":["class ColorBean {\r\n    constructor(r, g, b) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n    }\r\n\r\n    getRGB() {\r\n        return \"rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\r\n    }\r\n\r\n    setRGB(rgb) {\r\n        let rgbArray = rgb.substring(4, rgb.length-1).split(\",\");\r\n        rgbArray = rgbArray.length !== 3 ? [255, 255, 255] : rgbArray;\r\n        this.r = parseInt(rgbArray[0]);\r\n        this.g = parseInt(rgbArray[1]);\r\n        this.b = parseInt(rgbArray[2]);\r\n    }\r\n\r\n    equals(color) {\r\n        return this.getRGB() === color.getRGB();\r\n    }\r\n}\r\nexport default ColorBean;","import \"./Modal.css\";\r\n\r\nfunction Modal(props) {\r\n    return (\r\n        <div id={props.id} className=\"modal\">\r\n            <div className=\"modal-header\">\r\n                <span className=\"close\" onClick={() => closeModal(props.id)}>&times;</span>\r\n                <h2>{props.txt}</h2>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <center>\r\n                    <button onClick={() => doSomething(props.id, props.funct)}>Confirmar</button>\r\n                    <button onClick={() => closeModal(props.id)}>Cancelar</button>\r\n                </center>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getModal(id) {\r\n    return document.getElementById(id);\r\n}\r\n\r\nfunction closeModal(id) {\r\n    getModal(id).style.display = \"none\";\r\n}\r\n\r\nfunction openModal(id) {\r\n    getModal(id).style.display = \"block\";\r\n}\r\n\r\nfunction doSomething(id, funct) {\r\n    funct();\r\n    closeModal(id);\r\n}\r\n\r\n\r\nexport { Modal, openModal };\r\n","import { Modal, openModal } from \"../../../modal/Modal\";\r\n\r\nfunction Tools(props) {\r\n    let classNameActive = \"active\";\r\n    let idReset = \"reset\";\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <center>\r\n                <button onClick={() => props.setMode(true)} className={!props.eraserMode && props.printMode ? classNameActive : \"\"} >\r\n                    <i className='fas fa-paint-brush'></i>\r\n                </button>\r\n                <button onClick={() => props.setMode(false)} className={!props.eraserMode && !props.printMode ? classNameActive : \"\"}>\r\n                    <i className='fas fa-eye-dropper'></i>\r\n                </button>\r\n                <button onClick={() => props.eraser()} className={props.eraserMode ? classNameActive : \"\"} >\r\n                    <i className='fas fa-eraser'></i>\r\n                </button>\r\n                <button onClick={() => openModal(idReset)}>\r\n                    <i className='fas fa-trash-alt'></i>\r\n                </button>\r\n                <a id=\"saveImage\" download=\"pixel-art.png\" >\r\n                    <button>\r\n                        <i className='fas fa-save'></i>\r\n                    </button>\r\n                </a>\r\n            </center>\r\n            <Modal id={idReset} txt={\"¿Está seguro que desea restaurar el lienzo?\"} funct={props.resetCanvas}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Tools;","function SelectedColor() {\r\n    return (\r\n        <div id=\"selectedColor\"> &nbsp; </div>\r\n    );\r\n}\r\nexport default SelectedColor;\r\n","function Range(props) {\r\n    return (\r\n        <div className=\"range\">\r\n            <label className=\"labelRange\">{props.item.txt}</label> <br />\r\n            <label className=\"labelRangeValue\" id={props.item.label}></label> <br />\r\n            <input\r\n                className=\"inputRange\"\r\n                id={props.item.range}\r\n                type=\"range\"\r\n                min={props.item.min}\r\n                max={props.item.max}\r\n                step=\"1\"\r\n                onChange={() => props.funct()}></input>\r\n        </div>\r\n    )\r\n}\r\nexport default Range;","import $ from \"jquery\";\r\n\r\nconst getId = (id) => \"#\" + id;\r\nconst getClass = (className) => \".\" + className;\r\nconst getProperty = (property, value) => \"[\" + property + \"='\" + value + \"']\";\r\nconst setInFront = (range, label, value) => {\r\n    $(getId(label)).text(value);\r\n    $(getId(range)).val(value);\r\n};\r\n\r\nexport { getId, getClass, getProperty, setInFront };","import $ from \"jquery\";\r\nimport { getId, setInFront } from \"../util/JQueryUtil\";\r\n\r\nimport ColorBean from \"../classes/ColorBean\";\r\nimport ColorCfg from \"../classes/ColorCfg\";\r\n\r\nconst rgbCfg = new ColorCfg();\r\nconst defaultSavedColors = [\r\n    new ColorBean(0, 0, 0), //Negro\r\n    new ColorBean(127, 127, 127), //Gris oscuro\r\n    new ColorBean(136, 0, 21), //Bordo\r\n    new ColorBean(237, 38, 26), //Rojo\r\n    new ColorBean(255, 127, 39), //Naranja\r\n    new ColorBean(255, 242, 0), //Amarillo\r\n    new ColorBean(34, 177, 76), //Verde\r\n    new ColorBean(0, 162, 232), //Celeste\r\n    new ColorBean(63, 72, 204), //Azul violeta\r\n    new ColorBean(163, 73, 164), //Violeta\r\n    new ColorBean(255, 255, 255),\r\n    new ColorBean(195, 195, 195),\r\n    new ColorBean(185, 122, 87),\r\n    new ColorBean(255, 174, 201),\r\n    new ColorBean(255, 201, 14),\r\n    new ColorBean(239, 228, 176),\r\n    new ColorBean(181, 230, 29),\r\n    new ColorBean(153, 217, 234),\r\n    new ColorBean(112, 146, 190),\r\n    new ColorBean(200, 191, 231)\r\n]\r\n\r\n/*  Receives a cellId in parameter and \r\nmodifies its backgroundColor with the color in parameter */\r\nfunction colorizeCell(cellId, color) {\r\n    $(getId(cellId)).css(\"background-color\", color.getRGB());\r\n}\r\n/* modifies values in the website and the background color of selectedColor's cell */\r\nfunction setColors(color) {\r\n    setInFront(rgbCfg.r.range, rgbCfg.r.label, color.r);\r\n    setInFront(rgbCfg.g.range, rgbCfg.g.label, color.g);\r\n    setInFront(rgbCfg.b.range, rgbCfg.b.label, color.b);\r\n    colorizeCell(\"selectedColor\", color);\r\n}\r\n\r\nfunction getColorFromRanges(){\r\n    let r = $(getId(rgbCfg.r.range)).val();\r\n    let g = $(getId(rgbCfg.g.range)).val();\r\n    let b = $(getId(rgbCfg.b.range)).val();\r\n    return new ColorBean(r, g, b);\r\n}\r\n\r\nexport { rgbCfg, defaultSavedColors, colorizeCell, setColors, getColorFromRanges }","class ColorCfg {\r\n    constructor() {\r\n        this.r = {\r\n            txt: \"Rojo\",\r\n            range: \"rangeR\",\r\n            label: \"labelR\",\r\n            default: 150,\r\n            min: 0,\r\n            max: 255\r\n        };\r\n        this.g = {\r\n            txt: \"Verde\",\r\n            range: \"rangeG\",\r\n            label: \"labelG\",\r\n            default: 50,\r\n            min: 0,\r\n            max: 255\r\n        };\r\n        this.b = {\r\n            txt: \"Azul\",\r\n            range: \"rangeB\",\r\n            label: \"labelB\",\r\n            default: 0,\r\n            min: 0,\r\n            max: 255\r\n        }\r\n    }\r\n}\r\nexport default ColorCfg;","import Range from \"../../../../../range/Range\";\r\nimport { rgbCfg } from \"../../../../../../util/ColorUtil\";\r\n\r\nfunction RangesGroup(props) {\r\n    return (\r\n        <div className=\"dropdown-content\">\r\n            <Range item={rgbCfg.r} funct={props.changeColor} />\r\n            <Range item={rgbCfg.g} funct={props.changeColor} />\r\n            <Range item={rgbCfg.b} funct={props.changeColor} />\r\n        </div>\r\n    )\r\n}\r\nexport default RangesGroup;","import $ from \"jquery\";\r\n\r\nimport SelectedColor from \"./selectedcolor/SelectedColor\";\r\nimport RangesGroup from \"./rangesgroup/RangesGroup\";\r\n\r\nfunction DropdownSelectColor(props) {\r\n    return (\r\n        <div className=\"dropdown\" onMouseOver={() => setOpacity(0.1)} onMouseOut={() => setOpacity(1)}>\r\n            <SelectedColor />\r\n            <RangesGroup changeColor={props.changeColor} />\r\n        </div>\r\n    );\r\n}\r\nexport default DropdownSelectColor;\r\n\r\nfunction setOpacity(value) {\r\n    $(\".opaque\").css(\"opacity\", value);\r\n}","class GridBean {\r\n    constructor(rows, columns, size, border) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.size = size;\r\n        this.border = border;\r\n    }\r\n\r\n    toString() {\r\n        return \"Rows: \" + this.rows + \" | \" +\r\n        \"Columns: \" + this.columns + \" | \" +\r\n        \"Size: \" + this.size + \" | \" +\r\n        \"Border: \" + this.border + \" | \";\r\n    }\r\n}\r\nexport default GridBean;","import $ from \"jquery\";\r\nimport { getId, getClass, getProperty, setInFront } from \"../util/JQueryUtil\";\r\nimport GridBean from \"../classes/GridBean\";\r\nimport CanvasCfg from \"../classes/CanvasCfg\";\r\n\r\nconst canvasCfg = new CanvasCfg();\r\nconst getCellId = (x, y, gridId) => gridId + x + \"-\" + y;\r\nconst getCellClass = (gridId) => canvasCfg.htmlSettings.classCell + gridId;\r\n/* Sets a white backgroundColor in canvas */\r\nconst resetCanvas = () => { $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"background-color\", \"white\"); };\r\n\r\n/* Returns the last cellId without backgroundColor */\r\nfunction getLastCellIDSavedColors() {\r\n    let cells = $(getProperty(\"owner\", canvasCfg.htmlSettings.idSavedColors));\r\n    let index = 0;\r\n    for (let i = 0; i < cells.length; i++) {\r\n        if (cells[i].style.backgroundColor.length === 0) {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    return cells[index].id;\r\n}\r\n\r\n/* modifies values in the website with the grid in props and calls setCellSize() */\r\nfunction setGridSize(grid) {\r\n    setInFront(canvasCfg.row.range, canvasCfg.row.label, grid.rows);\r\n    setInFront(canvasCfg.column.range, canvasCfg.column.label, grid.columns);\r\n    setInFront(canvasCfg.cellSize.range, canvasCfg.cellSize.label, grid.size);\r\n    setInFront(canvasCfg.border.range, canvasCfg.border.label, grid.border);\r\n    setCellSize(grid);\r\n}\r\n\r\n/* Modifies the width and height of cells with the grid in props */\r\nfunction setCellSize(grid) {\r\n    $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"width\", grid.size);\r\n    $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"height\", grid.size);\r\n    $(getClass(canvasCfg.htmlSettings.classCellCanvas)).css(\"border\", grid.border + \"px solid black\");\r\n}\r\n\r\nfunction getGridFromRanges(){\r\n    let width = $(getId(canvasCfg.column.range)).val();\r\n    let height = $(getId(canvasCfg.row.range)).val();\r\n    let size = $(getId(canvasCfg.cellSize.range)).val();\r\n    let border = $(getId(canvasCfg.border.range)).val();\r\n    return new GridBean(height, width, size, border);\r\n}\r\n\r\nexport {\r\n    canvasCfg,\r\n    getCellId, getCellClass, \r\n    resetCanvas, getLastCellIDSavedColors,\r\n    setCellSize, setGridSize,\r\n    getGridFromRanges\r\n};","class CanvasCfg {\r\n    constructor() {\r\n        this.row = {\r\n            txt: \"Alto\",\r\n            range: \"height\",\r\n            label: \"labelH\",\r\n            default: 20,\r\n            min: 1,\r\n            max: 30\r\n        };\r\n        this.column = {\r\n            txt: \"Ancho\",\r\n            range: \"width\",\r\n            label: \"labelW\",\r\n            default: 15,\r\n            min: 1,\r\n            max: 30\r\n        };\r\n        this.cellSize = {\r\n            txt: \"Celda\",\r\n            range: \"size\",\r\n            label: \"labelS\",\r\n            default: 15,\r\n            min: 7,\r\n            max: 15\r\n        };\r\n        this.border = {\r\n            txt: \"Borde\",\r\n            range: \"border\",\r\n            label: \"labelBorder\",\r\n            default: 1,\r\n            min: 0,\r\n            max: 2\r\n        };\r\n        this.htmlSettings = {\r\n            idCanvas: \"canvas\",\r\n            idSavedColors: \"gridSavedColors\",\r\n            classCell: \"cell\",\r\n        };\r\n        this.htmlSettings.classCellCanvas = this.htmlSettings.classCell + this.htmlSettings.idCanvas;\r\n        this.htmlSettings.classCellSavedColors = this.htmlSettings.classCell + this.htmlSettings.idSavedColors;\r\n    }\r\n}\r\nexport default CanvasCfg;","import { getCellId, getCellClass } from \"../../../../util/GridUtil\";\r\n\r\nfunction Cell(props) {\r\n    let id = getCellId(props.x, props.y, props.id);\r\n    return (\r\n        <td owner={props.id} id={id} className={getCellClass(props.id)} onClick={() => props.funct(id)}></td>\r\n    );\r\n}\r\nexport default Cell;","import Cell from \"./cell/Cell\";\r\n\r\nfunction Row(props){\r\n    let columns = [];\r\n    for(let i = 0; i < props.columns; i++)\r\n        columns.push(<Cell key={i} x={i} y={props.row} funct={props.funct} id={props.id} />);\r\n        \r\n    return (<tr>{columns}</tr>);\r\n}\r\nexport default Row;","import Row from \"./row/Row\";\r\n\r\nfunction Grid(props) {\r\n    let rows = [];\r\n    for (let i = 0; i < props.rows; i++)\r\n        rows.push(<Row key={i} columns={props.columns} row={i} funct={props.funct} id={props.id} />);\r\n\r\n    return (<table id={props.id} className=\"grid\"><tbody>{rows}</tbody></table>);\r\n}\r\nexport default Grid;","import Grid from \"../../../../grid/Grid\";\r\nimport { canvasCfg } from \"../../../../../util/GridUtil\";\r\n\r\nfunction SavedColors(props) {\r\n    return (\r\n        <div>\r\n            <h5>Colores guardados</h5>\r\n            <div>\r\n                <Grid rows={6} columns={10} funct={props.copyColor} id={canvasCfg.htmlSettings.idSavedColors} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SavedColors;","function ButtonSave(props) {\r\n    return (\r\n        <center>\r\n            <button id=\"buttonSave\" onClick={() => props.saveColor()}>\r\n                <i className='fas fa-save'></i>&nbsp;&nbsp;Guardar color\r\n            </button>\r\n        </center>\r\n    );\r\n}\r\nexport default ButtonSave;","import $ from \"jquery\";\r\n\r\nimport DropdownSelectColor from \"./dropdownselectcolor/DropdownSelectColor\";\r\nimport SavedColors from \"./savedcolors/SavedColors\";\r\nimport ButtonSave from \"./buttonsave/ButtonSave\";\r\nimport { getId } from \"../../../../util/JQueryUtil\";\r\n\r\nimport \"./ColorSettings.css\";\r\n\r\nfunction ColorSettings(props) {\r\n    const divId = \"bodyColorSettings\";\r\n    return (\r\n        <div>\r\n            <p onClick={() => $(getId(divId)).slideToggle()}>Color</p>\r\n            <div id={divId}>\r\n                <DropdownSelectColor changeColor={props.changeColor} />\r\n                <ButtonSave          saveColor={props.saveColor}     />\r\n                <SavedColors         copyColor={props.copyColor}     />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ColorSettings;","import $ from \"jquery\";\r\n\r\nimport Range from \"../../../range/Range\";\r\nimport { canvasCfg } from \"../../../../util/GridUtil\";\r\nimport { getId } from \"../../../../util/JQueryUtil\";\r\n\r\nfunction CanvasSettings(props) {\r\n    const divId = \"bodySizeSettings\";\r\n    let item = canvasCfg.column;\r\n    item.max = props.isMobile ? 20 : item.max;\r\n    return (\r\n        <div className=\"opaque\">\r\n            <p onClick={() => $(getId(divId)).slideToggle()}>Lienzo</p>\r\n            <div id={divId}>\r\n                <Range item={canvasCfg.column}   funct={props.changeSize} />\r\n                <Range item={canvasCfg.row}      funct={props.changeSize} />\r\n                <Range item={canvasCfg.cellSize} funct={props.changeSize} />\r\n                <Range item={canvasCfg.border}   funct={props.changeSize} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CanvasSettings;","import React, { Component } from \"react\";\r\n\r\nimport Tools from \"./tools/Tools\";\r\nimport ColorSettings from \"./colorsettings/ColorSettings\";\r\nimport CanvasSettings from \"./canvassettings/CanvasSettings\";\r\n\r\nimport \"./Sidenav.css\";\r\n\r\nclass Sidenav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sidenav\">\r\n                <Tools\r\n                    setMode={this.props.setMode}\r\n                    eraser={this.props.eraser}\r\n                    resetCanvas={this.props.resetCanvas}\r\n                    printMode={this.props.printMode}\r\n                    eraserMode={this.props.eraserMode}\r\n                />\r\n                <ColorSettings\r\n                    changeColor={this.props.changeColor}\r\n                    saveColor={this.props.saveColor}\r\n                    copyColor={this.props.copyColor}\r\n                />\r\n                <CanvasSettings changeSize={this.props.changeSize} isMobile={this.props.isMobile} />\r\n                <br/><br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Sidenav;","import $ from \"jquery\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nimport { canvasCfg } from \"./GridUtil\";\r\nimport { getId } from \"./JQueryUtil\";\r\n\r\n\r\nfunction setDownloadImage() {\r\n    html2canvas(document.querySelector(getId(canvasCfg.htmlSettings.idCanvas))).then(canvas => {\r\n        var image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        $(\"#saveImage\").attr(\"href\", image);\r\n    });\r\n}\r\n\r\nexport { setDownloadImage };","import React, { Component } from \"react\";\r\n\r\nimport ColorBean from \"../../classes/ColorBean\";\r\nimport Sidenav from \"./sidenav/Sidenav\";\r\n\r\nimport { setDownloadImage } from \"../../util/Html2CanvasUtil\"; \r\nimport { rgbCfg, defaultSavedColors, colorizeCell, setColors, getColorFromRanges } from \"../../util/ColorUtil\";\r\nimport { resetCanvas, getLastCellIDSavedColors, setCellSize, setGridSize, getGridFromRanges } from \"../../util/GridUtil\";\r\n\r\nclass Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedColor: new ColorBean(rgbCfg.r.default, rgbCfg.g.default, rgbCfg.b.default),\r\n            savedColors: [],\r\n            eraser: false,\r\n            printMode: true\r\n        }\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* MODE */\r\n    /* Receives a boolean in parameter and calls setMode() function of App.js */\r\n    setMode(print) {\r\n        let state = this.state;\r\n        state.printMode = print;\r\n        state.eraser = false;\r\n        this.setState({ state });\r\n        return print ?\r\n            this.props.setMode(this.colorizeCellWithSelectedColor.bind(this)) :\r\n            this.props.setMode(this.copyColor.bind(this));\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* COLORS */\r\n    /* Receives a color in parameter and modifies the selectedColor attribute in state */\r\n    setSelectedColor(color) {\r\n        let state = this.state;\r\n        state.selectedColor = color;\r\n        this.setState({ state });\r\n        setColors(this.state.selectedColor);\r\n    }\r\n    /* Creates a color with values of ranges, and calls setSelectedColor() */\r\n    changeColor() {\r\n        this.setSelectedColor(getColorFromRanges());\r\n    }\r\n    /* Creates a white color, and calls setSelectedColor() */\r\n    eraser() {\r\n        let state = this.state;\r\n        state.eraser = !state.eraser;\r\n        this.setState({ state });\r\n    }\r\n    /*  Receives a cellId in parameter and \r\n    modifies its backgroundColor with the selectedColor attribute in state */\r\n    colorizeCellWithSelectedColor(cellId) {\r\n        if (this.state.eraser)\r\n            colorizeCell(cellId, new ColorBean(255, 255, 255));\r\n        else\r\n            colorizeCell(cellId, this.state.selectedColor);\r\n        setDownloadImage();\r\n    }\r\n\r\n    /* Receives a cellId in parameter, creates a color with its backgroundColor and\r\n    calls setSelectedColor() */\r\n    copyColor(cellId) {\r\n        let bgColor = document.getElementById(cellId).style.backgroundColor;\r\n        let color = new ColorBean();\r\n        color.setRGB(bgColor);\r\n        this.setMode(true);\r\n        this.setSelectedColor(color);\r\n    }\r\n    /* Looking for the last cellId without backgroundColor and calls colorizeCellWithSelectedColor() */\r\n    saveColor() {\r\n        let colorIsAlreadySaved = () => this.state.savedColors.find(color => color.equals(this.state.selectedColor));\r\n        if (colorIsAlreadySaved()) {\r\n            return;\r\n        }\r\n        let lastId = getLastCellIDSavedColors();\r\n        this.colorizeCellWithSelectedColor(lastId);\r\n\r\n        let state = this.state;\r\n        state.savedColors.push(this.state.selectedColor);\r\n        this.setState({ state });\r\n    }\r\n    fillDefaultSavedColors() {\r\n        defaultSavedColors.forEach(color => {\r\n            let lastId = getLastCellIDSavedColors();\r\n            colorizeCell(lastId, color);\r\n        })\r\n        let state = this.state;\r\n        Array.prototype.push.apply(state.savedColors, defaultSavedColors);\r\n        this.setState({ state });\r\n    }\r\n\r\n    /* |||||||||||||||||||||||||||||| */\r\n    /* SIZE */\r\n    /* Create a grid with values of ranges and calls changeGrid() function of App.js and setGridSize() */\r\n    changeSize() {\r\n        let grid = getGridFromRanges();\r\n        this.props.changeGrid(grid);\r\n        setGridSize(grid);\r\n        setDownloadImage();\r\n    }\r\n\r\n    componentDidMount() {\r\n        setGridSize(this.props.grid);\r\n        setColors(this.state.selectedColor);\r\n        setDownloadImage();\r\n        this.fillDefaultSavedColors();\r\n        this.setMode(true);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.grid.toString() !== prevProps.grid.toString()) {\r\n            setCellSize(this.props.grid);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Sidenav\r\n                    changeSize={this.changeSize.bind(this)}\r\n                    changeColor={this.changeColor.bind(this)}\r\n                    saveColor={this.saveColor.bind(this)}\r\n                    copyColor={this.copyColor.bind(this)}\r\n                    setMode={this.setMode.bind(this)}\r\n                    eraser={this.eraser.bind(this)}\r\n                    resetCanvas={resetCanvas}\r\n                    isMobile={this.props.isMobile}\r\n                    printMode={this.state.printMode}\r\n                    eraserMode={this.state.eraser}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Settings;","import Grid from \"../grid/Grid\";\r\nimport { canvasCfg } from \"../../util/GridUtil\";\r\n\r\nfunction Main(props) {\r\n        return (\r\n            <div className=\"main\">\r\n                <Grid\r\n                    rows={props.grid.rows}\r\n                    columns={props.grid.columns}\r\n                    funct={props.funct}\r\n                    id={canvasCfg.htmlSettings.idCanvas}\r\n                />\r\n            </div>\r\n        );\r\n}\r\nexport default Main;","import React, { Component } from \"react\";\r\nimport { withGetScreen } from 'react-getscreen';\r\nimport \"./App.css\";\r\nimport \"./components/grid/Grid.css\";\r\n\r\nimport Settings from \"./components/settings/Settings\";\r\nimport Main from \"./components/main/Main\";\r\nimport GridBean from \"./classes/GridBean\";\r\nimport { canvasCfg } from \"./util/GridUtil\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      funct: () => { },\r\n      grid: new GridBean(canvasCfg.row.default,\r\n        canvasCfg.column.default,\r\n        canvasCfg.cellSize.default,\r\n        canvasCfg.border.default),\r\n    }\r\n  }\r\n\r\n  /* Modifies the funct attribute in the state */\r\n  setMode(funct) {\r\n    let state = this.state;\r\n    state.funct = funct;\r\n    this.setState({ state });\r\n  }\r\n\r\n  /* Modifies the grid attribute in the state */\r\n  changeGrid(grid) {\r\n    let state = this.state;\r\n    state.grid = grid;\r\n    this.setState({ state });\r\n  }\r\n\r\n  PixelArt() {\r\n    return (\r\n      <div>\r\n        <Settings isMobile={this.props.isTablet()} grid={this.state.grid} setMode={this.setMode.bind(this)} changeGrid={this.changeGrid.bind(this)} />\r\n        <Main grid={this.state.grid} funct={this.state.funct} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  Warning() {\r\n    return (\r\n      <div id=\"warning\">\r\n        <h1>Por favor, voltea el dispositivo para poder usar PixelArt</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.props.isMobile()) return this.Warning();\r\n    return this.PixelArt();\r\n  }\r\n}\r\n\r\nexport default withGetScreen(App);","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}